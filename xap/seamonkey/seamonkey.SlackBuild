#!/bin/sh

# Copyright 2008, 2009, 2010, 2011  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

TARBALLVER=${VERSION:-$(basename $(ls seamonkey-*.tar.* | cut -d - -f 2 | rev | cut -f 3- -d . | rev) .source)}
# Strip the end from beta versions:
VERSION=$(echo $TARBALLVER | cut -f 1 -d b)
COMM=${COMM:-release}
BUILD=${BUILD:-1}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) export ARCH=i486 ;;
    arm*) export ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
       *) export ARCH=$( uname -m ) ;;
  esac
fi

if [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

NUMJOBS=${NUMJOBS:-" -j7 "}

CWD=$(pwd)
TMP=${TMP:-/tmp}
PKG=$TMP/package-seamonkey
rm -rf $PKG
mkdir -p $TMP $PKG/usr

cd $TMP
rm -rf comm-$COMM
tar xvf $CWD/seamonkey-${TARBALLVER}.source.tar.?z* || exit 1
cd comm-$COMM || exit 1

# Make sure the perms/ownerships are sane:
chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \; -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \;

# Fix a long standing bug that's prevented staying current on GTK+.
# Thanks to the BLFS folks.  :-)
cat >> mozilla/layout/build/Makefile.in << EOF

ifdef MOZ_ENABLE_CANVAS
EXTRA_DSO_LDOPTS += \$(XLDFLAGS) -lX11 -lXrender
endif

EOF

chown -R root:root .
BUILD_OFFICIAL=1 MOZILLA_OFFICIAL=1 \
./configure --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --enable-optimize=-O2 \
  --enable-cpp-rtti \
  --enable-system-cairo \
  --enable-default-toolkit=cairo-gtk2 \
  --enable-startup-notification \
  --disable-debug \
  --with-default-mozilla-five-home=/usr/lib${LIBDIRSUFFIX}/seamonkey-${VERSION} \
  --enable-strip \
  --disable-tests \
  --enable-svg \
  --enable-canvas \
  --disable-short-wchar \
  --enable-nspr-autoconf \
  --enable-extensions=default,irc \
  --enable-crypto \
  --enable-shared-js \
  --enable-libxul \
  --disable-xprint \
  --without-system-nspr \
  --with-system-zlib \
  --with-system-jpeg \
  --with-system-mng \
  --enable-application=suite \
  --enable-xft \
  --host=$ARCH-slackware-linux \
  --target=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

  # --with-system-png
make $NUMJOBS || exit 1
DESTDIR=$PKG make install || exit 1

# Install js/nspr/nss headers.
for includedir in nspr nspr/obsolete nspr/private ; do
  mkdir -p $PKG/usr/include/seamonkey-${VERSION}/$includedir
  cp -aL mozilla/dist/include/${includedir}/*.h $PKG/usr/include/seamonkey-${VERSION}/$includedir
done
cp -aL mozilla/dist/include/*.tbl mozilla/dist/include/*.msg $PKG/usr/include/seamonkey-${VERSION}
cp -aL mozilla/dist/include/*.h $PKG/usr/include/seamonkey-${VERSION}
cp -aL mozilla/dist/sdk/include/* $PKG/usr/include/seamonkey-${VERSION}
# compat symlinks
( cd $PKG/usr/include/seamonkey-${VERSION}
  ln -sf . js
  ln -sf . nss
  ln -sf . plugin
  ln -sf . xpcom
)

# Stuff needed by gecko-mediaplayer.  As of version 1.0.3 it still will not
# compile after adding these things to the main seamonkey package, but the API
# change that stops it will need to be corrected outside of seamonkey.
# If anything else is missing, please notify me.  I would prefer to add the
# exact headers required by something rather than just dumping all the
# "mozilla/" headers and bloating things for no good reason...  :)
cp -aL mozilla/dist/include/mozilla/mozalloc.h $PKG/usr/include/seamonkey-${VERSION}
cp -aL mozilla/dist/include/mozilla/mozalloc_macro_wrappers.h $PKG/usr/include/seamonkey-${VERSION}
cp -aL mozilla/dist/include/mozilla/threads/nsThreadIDs.h $PKG/usr/include/seamonkey-${VERSION}
cp -aL mozilla/dist/include/mozilla/Util.h $PKG/usr/include/seamonkey-${VERSION}
cp -aL mozilla/dist/include/mozilla/Types.h $PKG/usr/include/seamonkey-${VERSION}
( cd $PKG/usr/include/seamonkey-${VERSION}
  ln -sf . mozilla
  ln -sf . threads
)

## ???
#( cd $PKG/usr/include/seamonkey-${VERSION}/plugin
#  for file in ../j*.h ; do
#    ln -sf $file .
#  done
#)

chown -R root:root $PKG/usr/include/seamonkey-${VERSION}
find $PKG/usr/include/seamonkey-${VERSION} -name "*.h" -type f -exec chmod 644 {} \;
# Create a more generic include files symlink:
( cd $PKG/usr/include
  if [ ! -e seamonkey ]; then
    ln -sf seamonkey-${VERSION} seamonkey
  fi
)

# Install pkgconfig files:
mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}/pkgconfig
for file in $CWD/pkgconfig/* ; do
cat $file \
  | sed -e "s/@LIB@/lib${LIBDIRSUFFIX}/" \
  -e "s/@VERSION@/$VERSION/" \
  > $PKG/usr/lib${LIBDIRSUFFIX}/pkgconfig/$(basename $file)
done

# Add symlinks for the pkgconfig files:
( cd $PKG/usr/lib${LIBDIRSUFFIX}/pkgconfig
  ln -s seamonkey-js.pc js.pc
  ln -s seamonkey-nspr.pc nspr.pc
  ln -s seamonkey-nss.pc nss.pc
  ln -s seamonkey-plugin.pc plugin.pc
  ln -s seamonkey-xpcom.pc xpcom.pc
)

# Compress and if needed symlink the man pages:
if [ -d $PKG/usr/man ]; then
  ( cd $PKG/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd $manpagedir
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink $eachpage ).gz $eachpage.gz
          rm $eachpage
        done
        gzip -9 *.?
      )
    done
  )
fi

# Strip files:
find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# This remains the standard plugin directory for all browsers.
mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}/mozilla/plugins

# This is traditional.
( cd $PKG/usr/lib${LIBDIRSUFFIX}
  if [ ! -e seamonkey ]; then
    ln -sf seamonkey-${VERSION} seamonkey
  fi
)

mkdir -p $PKG/usr/share/applications
cp -a $CWD/*.desktop $PKG/usr/share/applications
chown -R root:root $PKG/usr/share/applications
chmod 644 $PKG/usr/share/applications/*
mkdir -p $PKG/usr/share/pixmaps
cp -a $CWD/*.png $PKG/usr/share/pixmaps
chown -R root:root $PKG/usr/share/pixmaps
chmod 644 $PKG/usr/share/pixmaps/*

mkdir -p $PKG/usr/doc/seamonkey-$VERSION
( cd mozilla
  cp -a \
    LEGAL LICENSE README.txt \
    $PKG/usr/doc/seamonkey-$VERSION
)

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
zcat $CWD/doinst.sh.gz | sed -e "s#usr/lib#usr/lib${LIBDIRSUFFIX}#g" \
  > $PKG/install/doinst.sh

cd $TMP/package-seamonkey
/sbin/makepkg -l y -c n -p $TMP/seamonkey-$TARBALLVER-$ARCH-$BUILD.txz

# Create a standalone seamonkey-solibs package for RPM, gxine, etc.
rm -r $TMP/package-seamonkey-solibs
mkdir -p $TMP/package-seamonkey-solibs/usr/doc
cp -a $PKG/usr/doc/seamonkey-$VERSION $TMP/package-seamonkey-solibs/usr/doc
mkdir -p $TMP/package-seamonkey-solibs/usr/lib${LIBDIRSUFFIX}/seamonkey-${VERSION}
for file in libfreebl3.chk libfreebl3.so libmozjs.so libmozsqlite3.so \
  libnspr4.so libnss* libplc4.so libplds4.so libsmime3.so libsoftokn3.chk \
  libsoftokn3.so libssl3.so ; do
  cp -a $PKG/usr/lib${LIBDIRSUFFIX}/seamonkey-${VERSION}/$file \
  $TMP/package-seamonkey-solibs/usr/lib${LIBDIRSUFFIX}/seamonkey-${VERSION}
done
mkdir $TMP/package-seamonkey-solibs/install
cat << EOF | sed -e "s#usr/lib#usr/lib${LIBDIRSUFFIX}#g" > $TMP/package-seamonkey-solibs/install/doinst.sh
( cd usr/lib ; rm -rf seamonkey )
( cd usr/lib ; ln -sf seamonkey-$VERSION seamonkey )
if ! grep /usr/lib/seamonkey etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  echo "/usr/lib/seamonkey" >> etc/ld.so.conf
fi
if [ -x /sbin/ldconfig ]; then
  /sbin/ldconfig 2> /dev/null
fi
EOF
cat << EOF > $TMP/package-seamonkey-solibs/install/slack-desc
                |-----handy-ruler------------------------------------------------------|
seamonkey-solibs: seamonkey-solibs (Shared libraries from Seamonkey)
seamonkey-solibs:
seamonkey-solibs: This package contains a subset of the shared libraries from Seamonkey
seamonkey-solibs: to provide runtime support for programs that require nss, nspr, and
seamonkey-solibs: js.  These libraries are used in programs like RPM and gxine, and can
seamonkey-solibs: be used in others.  This package is built from the Seamonkey sources
seamonkey-solibs: and is provided as a standalone runtime package for people who do not
seamonkey-solibs: want to install the entire seamonkey package (as for server use).
seamonkey-solibs:
seamonkey-solibs: This package is runtime only.  The include files and other files for
seamonkey-solibs: development can be found in the seamonkey package.
EOF
cd $TMP/package-seamonkey-solibs
/sbin/makepkg -l y -c n -p $TMP/seamonkey-solibs-$TARBALLVER-$ARCH-$BUILD.txz

