#!/bin/sh
# rc.modules 12.3456789  Sun May 10 05:31:26 UTC 2009  pp (rb), pjv, rlw
#
# This file loads extra drivers into the Linux kernel.
#
# The modules will be looked for under /lib/modules/<kernel version number>
# On systems using udev, this file should remain mostly commented out.  
# Nearly all hardware device modules will be loaded automatically on such 
# systems.  This file should only be used when udev is not loading a module 
# that you require, or if you are not using udev (which is going to become 
# increasingly impossible...), or if you want to force a particular module 
# to be loaded where alternatives exist.
#
# Many Linux kernel modules will accept extra options.  The Linux kernel
# source is the best place to look for extra documentation for the various
# modules.  This can be found under /usr/src/linux/Documentation if you've
# the installed the kernel sources. 
#
# NOTE:  This may not be a complete list of modules.  If you don't see what
# you're looking for, look around in /lib/modules/2.x.x/ for an appropriate
# module.  Also, if any problems arise loading or using these modules, try
# compiling and installing a custom kernel that contains the support instead.
# That always works. ;^)

# Determine the version of the running kernel:
RELEASE=$(uname -r)

### Update module dependencies ###
# If /usr is mounted and we have 'find', we can try to take a shortcut:
if [ -x /usr/bin/find -a -e /lib/modules/$RELEASE/modules.dep \
     -a /lib/modules/$RELEASE/modules.dep -nt /etc/modules.conf ]; then
  NEWMODS="$(/usr/bin/find /lib/modules/$RELEASE -mindepth 2 -type f -newer /lib/modules/$RELEASE/modules.dep)"
  # Only rebuild dependencies if new module(s) are found:
  if [ ! "" = "$NEWMODS" ]; then
    echo "Updating module dependencies for Linux $RELEASE:"
    /sbin/depmod -a
  else
    echo "Module dependencies up to date (no new kernel modules found)."
  fi
else # we don't have find, or there is no existing modules.dep, or it is out of date.
  echo "Updating module dependencies for Linux $RELEASE:"
  /sbin/depmod -A
fi

### Mouse support:
# PS/2 mouse support:
# The default in Slackware is to use proto=imps because that works with the
# most types of mice out of the box.  For example, using proto=any will
# completely break the mouse if you change consoles with several models of KVM
# switches.
#
# This is commented out here because a better place to configure the options
# for the psmouse module is in /etc/modprobe.d/psmouse.
#
#/sbin/modprobe psmouse proto=imps
#
# Serial (RS-232, COM port) mouse support:
#/sbin/modprobe sermouse
#
# Microsoft/ATI XL busmouse support:
# Microsoft busmouse (also called Inport mice) is connected to an 
# expansion board using a round connector with 9 pins.  Be aware that 
# several vendors talk about 'Microsoft busmouse' and actually mean 
# PS/2 busmouse -- so count the pins on the connector.  This driver
# also supports the ATIXL mouse, a rare mouse that is connected to the
# back of an ATI video card:
#/sbin/modprobe inport 
#
# Logitech mouse connected to a proprietary interface card. It's
# generally a round connector with 9 pins.  Note that the newer mice
# made by Logitech don't use the Logitech protocol anymore; for those,
# you don't need this module:
#/sbin/modprobe logibm 
#
# IBM PC110 palmtop digitizer pad:
#/sbin/modprobe pc110pad

#### ACPI support ###
# Advanced Configuration and Power Interface (ACPI) support for Linux
# requires an ACPI compliant platform (hardware/firmware), and assumes
# the presence of OS-directed configuration and power management (OSPM)
# software.  Linux ACPI provides a robust functional replacement for
# several legacy configuration and power management interfaces, including
# the Plug-and-Play BIOS specification (PnP BIOS), the MultiProcessor
# Specification (MPS), and the Advanced Power Management (APM)
# specification.  If both ACPI and APM support are configured, whichever
# is loaded first shall be used.  Also note that in many cases udev will
# load the required modules if ACPI is found to be active.
# ACPI can be disabled with the "noacpi" boot option.
# Also note that ACPI is blacklisted with our default kernel
# configurations on machines with a BIOS older than 2001-01-01.  If you
# still want to try it, you'll need to use the "acpi=force" boot option.
#
# AC Adapter (indicates whether a system is on AC, or not):
#/sbin/modprobe ac
#
# Battery (adds battery information through/proc/acpi/battery):
#/sbin/modprobe battery
#
# Button (handles events on the power, sleep and lid buttons):
#/sbin/modprobe button
#
# Video.  This driver implements the ACPI Extensions For Display Adapters
# for integrated graphics devices on motherboard, as specified in ACPI 2.0
# Specification, Appendix B, allowing some basic control like defining the
# video POST device, retrieving EDID information, or to setup a video output.
# Note that this is an reference implementation only, and it may or may not
# work for your integrated video device.
#/sbin/modprobe video
#
# Fan (adds support for ACPI fan control and status):
#/sbin/modprobe fan
#
# Dock (adds support for ACPI controlled docking stations):
#/sbin/modprobe dock
#
# Bay (adds support for ACPI controlled removable drive bays such as the
# IBM UltraBay or the Dell Module Bay):
#/sbin/modprobe bay
#
# Processor.  This driver installs ACPI as the idle handler for Linux, and
# uses ACPI C2 and C3 processor states to save power, on systems that
# support it.  It is required by several flavors of cpufreq Performance-
# state drivers.
#/sbin/modprobe processor
#
# Thermal.  This driver adds support for ACPI thermal zones.  Most mobile and
# some desktop systems support ACPI thermal zones.  It is HIGHLY recommended
# that this option be enabled, as your processor(s) may be damaged without it.
#/sbin/modprobe thermal
#
# Memory.  This driver adds support for ACPI Memory Hotplug.  This driver
# provides support for fielding notifications on ACPI memory devices
# (PNP0C80) which represent memory ranges that may be onlined or offlined
# during runtime.  Enabling this driver assumes that your platform hardware
# and firmware have support for hot-plugging physical memory.  If your
# system does not support physically adding or ripping out memory DIMMs at
# some platform defined granularity (individually or as a bank) at runtime,
# then you need not enable this driver.
#/sbin/modprobe memory
#
# Container (EXPERIMENTAL -- allows _physical_ insertion and removal of CPUs
# and memory on machines that support it):
#/sbin/modprobe container
#
# ASUS/Medion Laptop Extras.  This driver provides support for extra features
# of ACPI-compatible ASUS laptops.  As some of Medion laptops are made by
# ASUS, it may also support some Medion laptops (such as 9675 for example).
# It makes all the extra buttons generate standard ACPI events that go through
# /proc/acpi/events, and (on some models) adds support for changing the
# display brightness and output, switching the LCD backlight on and off, and,
# most importantly, allows you to blink those fancy LEDs intended for
# reporting mail and wireless status.  All settings are changed via
# /proc/acpi/asus directory entries.  Owner and group for these entries can be
# set with asus_uid and asus_gid module parameters.
# More information and a userspace daemon for handling the extra buttons:
# http://sourceforge.net/projects/acpi4asus/
#/sbin/modprobe asus_acpi
#
# ThinkPad ACPI Laptop Extras.  This is a driver for the IBM and Lenovo
# ThinkPad laptops.  It adds support for Fn-Fx key combinations, Bluetooth
# control, video output switching, ThinkLight control, UltraBay eject and
# more.  For more information about this driver see:
# Documentation/thinkpad-acpi.txt and http://ibm-acpi.sf.net/
#/sbin/modprobe thinkpad_acpi
#
# Toshiba Laptop Extras.  This driver adds support for access to certain
# system settings on "legacy free" Toshiba laptops.  These laptops can be
# recognized by their lack of a BIOS setup menu and APM support.  On these
# machines, all system configuration is handled through the ACPI.  This
# driver is required for access to controls not covered by the general ACPI
# drivers, such as LCD brightness and video output.  Configuration is
# accessed by reading and writing text files in the /proc tree.  Furthermore,
# no power management functions are exposed, as those are handled by the
# general ACPI drivers.
# More information about this driver is available at:
# http://memebeam.org/toys/ToshibaAcpiDriver
#/sbin/modprobe toshiba_acpi
#
#
# See also the ACPI CPU frequency scaling driver in the "CPU frequency
# scaling modules" section below.

#### APM support ###
# APM is a BIOS specification for saving power using several different
# techniques.  This is mostly useful for battery powered laptops.
# If a kernel supports ACPI it will always be built in, not a module.
# APM is considered obsolete on newer hardware -- most things have ACPI.
#/sbin/modprobe apm

# Enable PC speaker support:
#/sbin/modprobe pcspkr

### Built-in PC parallel port support ###
# Generic setup example.  Attempt to load by default, since it usually
# won't hurt.  Some (most?) people may want to comment the line below
# and look into better functioning and performing hardware specific
# options as described later on in this section.
#
/sbin/modprobe -q parport_pc 2> /dev/null
# Hardware specific setup example  (PLIP requires an IRQ, and the
# ECP protocol requires a DMA channel)
# This may also give better performance in general.
#/sbin/modprobe parport_pc io=0x378 irq=7 dma=1

### PCI parallel/serial card support:
# If your serial/parallel ports are on a PCI card, uncomment the
# line below and comment the section above that loads parport_pc.
#/sbin/modprobe parport_serial

### Parallel printer support ###
# This should be safe to try to load by default.
/sbin/modprobe -q lp 2> /dev/null

### Parallel port IP ###
#/sbin/modprobe plip

### Filesystem Quota support ###
if /bin/grep -q quota /etc/fstab ; then
  # /sbin/modprobe quota_v1
  /sbin/modprobe quota_v2
fi

### AGP (Accelerated Graphics Port) GART support ###
# This module takes care of programming the GART (part of your motherboard's
# chipset that handles gathering data from memory and passing it to the
# card) and enables faster AGP transfers.  The AGP GART module is required
# to use AGP features of your 3D rendering video card.  You'll need this to
# with most cards (nVidia's official drivers that include their own GART
# support being a notable exception) to use X11's direct rendering support.
/sbin/modprobe agpgart 2> /dev/null

### non-IDE CD-ROM drive support ###
# These modules add CD-ROM drive support.  Most of these drivers will probe
# for the I/O address and IRQ of the drive automatically if the parameters
# to configure them are omitted. Typically the I/O address will be specified 
# in hexadecimal, e.g.: cm206=0x300,11
#
# ***NONE*** of these drivers are for use with IDE/ATAPI CD-ROM drives.  That
# support is already built into every pre-compiled Slackware Linux kernel.
# Also, note that all of the manufacturers listed below stopped making these
# types of wacky-interface drives years ago and all make IDE/ATAPI-interface
# CD-ROM drives now.  So, just because your drive says "Mitsumi" on it is not 
# reason enough to think you need the special Mitsumi module loaded, etc.  If
# you got your drive within the last couple of years it's probably IDE.  Try 
# tossing a disc in the drive and mounting it on the various IDE interfaces it
# could be using, like /dev/hdc. 
# 
#/sbin/modprobe aztcd aztcd=<I/O address>
#/sbin/modprobe cdu31a cdu31a_port=<I/O address> cdu31a_irq=<interrupt>
#/sbin/modprobe cm206 cm206=<I/O address>,<IRQ>
#/sbin/modprobe gscd gscd=<I/O address>
#/sbin/modprobe mcdx mcdx=<I/O address>,<IRQ>
#/sbin/modprobe optcd optcd=<I/O address>
# Below, this last number is "1" for SoundBlaster Pro card, or "0" for a clone.
#/sbin/modprobe sbpcd sbpcd=<I/O address>,1
#/sbin/modprobe sjcd sjcd=<I/O address>
#/sbin/modprobe sonycd535 sonycd535=<I/O address>

# CD-ROM drives on ISP16, MAD16 or Mozart sound card:
#/sbin/modprobe isp16 isp16_cdrom_base=<port> isp16_cdrom_irq=<irq> isp16_cdrom_dma=<dma> isp16_cdrom_type=<drive_type>
#  where the values are one of: port=0x340,0x320,0x330,0x360
#                               irq=0,3,5,7,9,10,11
#                               dma=0,3,5,6,7
#                               drive_type=noisp16,Sanyo,Panasonic,Sony,Mitsumi

### Cyclades multiport serial card support ###
#/sbin/modprobe cyclades

#### Serial line IP support (SLIP/CSLIP/PPP) ###
## This module is for SLIP/CSLIP support:
#/sbin/modprobe slip

## Load PPP:
# This module is for PPP support:
#/sbin/modprobe ppp_generic
# This PPP plugin supports PPP over serial lines:
#/sbin/modprobe ppp_async
# Use this plugin instead for HDLC (used for high-speed leased lines like T1/E1)
#/sbin/modprobe ppp_synctty

## This module provides compression for PPP (optional):
##/sbin/modprobe ppp_deflate

### USB Host Controllers:
# Enhanced Host Controller Interface (USB 2.0)
#/sbin/modprobe ehci-hcd
# Open Host Controller Interface (Compaq/Microsoft/National standard):
#/sbin/modprobe ohci-hcd
# Universal Host Controller Interface (Intel/Via standard):
#/sbin/modprobe uhci-hcd
# ISP1160/ISP1161 USB Host Controllers
#/sbin/modprobe isp116x-hcd
# SL811HS USB Host Controller
#/sbin/modprobe sl811-hcd
# SL811HS PCMCIA/CF USB Host Controller
#/sbin/modprobe sl811_cs

### USB device support:
# (Note that once you've loaded USB hub support most USB devices will
# trigger the kernel to load their modules automatically)
# USB "Human Interface Device" driver; handles most USB mice, joysticks,
# gamepads, steering wheels, keyboards, trackballs and digitizers.
#/sbin/modprobe usbhid
# Simple HIDBP USB mouse driver, if hid doesn't work:
#/sbin/modprobe usbmouse
# Simple HIDBP USB keyboard driver, if hid doesn't work:
#/sbin/modprobe usbkbd
# Wacom Graphire and Intuos tablet driver:
#/sbin/modprobe wacom
# Logitech WingMan Force joystick:
#/sbin/modprobe iforce
# USB audio:
#/sbin/modprobe audio
# USB modem support:
#/sbin/modprobe cdc-acm
# USB serial converter:
#/sbin/modprobe usbserial
# USB printer support:
#/sbin/modprobe usblp 
# IBM "C-It" USB video camera:
#/sbin/modprobe ibmcam framerate=1
# USB OV511 Camera support:
#/sbin/modprobe ov511
# USB ADMtek Pegasus-based ethernet device support:
#/sbin/modprobe pegasus
# Kawasaki USB ethernet controller support:
#/sbin/modprobe kaweth
# USB Mustek MDC800 Digital Camera Support:
#/sbin/modprobe mdc800
# USB Mass Storage support:
#/sbin/modprobe usb-storage
# USS720 parallel-port driver:
#/sbin/modprobe uss720
# Prolific PL-2302 USB-to-USB network device:
#/sbin/modprobe plusb
# USB Diamond Rio500 support:
#/sbin/modprobe rio500
# D-Link DSB-R100 FM radio support:
#/sbin/modprobe dsbr100
# USB Bluetooth support:
#/sbin/modprobe bluetooth

### USB event drivers:
# Mouse input:
#/sbin/modprobe mousedev
# Joystick input:
#/sbin/modprobe joydev
# Generic event reporting device:
#/sbin/modprobe evdev

### ALSA (Advanced Linux Sound Architecture) support: 
# Sound Blaster Pro/16 support:
#/sbin/modprobe snd-sb16 port=0x220 irq=5 dma8=3 dma16=5 mpu_port=0x300
# Sound Blaster Live support:
#/sbin/modprobe snd-emu10k1
# AD1816(A) sound driver:
#/sbin/modprobe snd-ad1816a port=0x530 irq=5 dma1=1 dma2=3
# Crystal CS4232 based (PnP) cards:
#/sbin/modprobe snd-cs4232
# ES1370 (Ensoniq AudioPCI ES1370) support.  This is for some Creative
# Labs Sound Blaster PCI64/128 (that use the ES1370 chipset), and
# Ensoniq AudioPCI-97:
#/sbin/modprobe snd-ens1370
# ES1371 (Ensoniq AudioPCI ES1371/73) support.  This is for some Creative
# Labs Sound Blaster PCI64/128 (that use the ES1371/73 chipset), Ectiva
# EV1938, Vibra PCI128, and Ensoniq AudioPCI ES1371/73:
#/sbin/modprobe snd-ens1371
# ESS Maestro, Maestro2, Maestro2E:
#/sbin/modprobe snd-es1968 
# ESS Maestro3/Allegro:
#/sbin/modprobe snd-maestro3
# VIA VT82xx Audio Controller
#/sbin/modprobe snd-via82xx
# (For information on configuring other sound cards with Linux,
# see the documentation in /usr/src/linux/Documentation/sound/,
# and /usr/src/linux/Documentation/Configure.help.

### Joystick support ###
# The core joystick input support module, needed by all of the
# joystick devices below:
#/sbin/modprobe joydev
### Next, you must load a module for your gameport.
# Classic ISA/PnP gameports:
#/sbin/modprobe ns558
# SoundBlaster Live! gameports:
#/sbin/modprobe emu10k1-gp
# Many soundcards had their gameport support bundled in sound drivers
### Drivers for various joystick devices ###
# Analog joysticks and gamepads:
#/sbin/modprobe analog
# Assassin 3D and MadCatz Panther devices:
#/sbin/modprobe a3d
# Logitech ADI digital joysticks and gamepads:
#/sbin/modprobe adi
# Creative Labs Blaster Cobra gamepad:
#/sbin/modprobe cobra
# Genius Flight2000 Digital joysticks and gamepads:
#/sbin/modprobe gf2k
# Gravis GrIP joysticks and gamepads:
#/sbin/modprobe grip
# InterAct digital joysticks and gamepads:
#/sbin/modprobe interact
# ThrustMaster DirectConnect joysticks and gamepads:
#/sbin/modprobe tmdc
# Microsoft SideWinder digital joysticks and gamepads:
#/sbin/modprobe sidewinder
### Serial port game controller support ###
# Both of these are needed for serial-port game controllers:
#/sbin/modprobe serio
#/sbin/modprobe serport
# Logitech WingMan Warrior joystick:
#/sbin/modprobe warrior
# LogiCad3d Magellan/SpaceMouse 6dof controller:
#/sbin/modprobe magellan
# SpaceTec SpaceOrb/Avenger 6dof controller:
#/sbin/modprobe spaceorb
# SpaceTec SpaceBall 4000 FLX 6dof controller:
#/sbin/modprobe spaceball
# Gravis Stinger gamepad:
#/sbin/modprobe stinger
# I-Force joysticks/wheels:
#/sbin/modprobe iforce
### Parallel port connected controllers ###
# Multisystem, Sega Genesis, Saturn joysticks and gamepads:
#/sbin/modprobe db9
# Multisystem, NES, SNES, N64, PSX joysticks and gamepads:
#/sbin/modprobe gamecon
# Multisystem joysticks via TurboGraFX device:
#/sbin/modprobe turbografx

### Appletalk support ###
# This is needed if you want to run netatalk, a package which allows
# you to use you Linux box as a file and print server for Apple Macintosh 
# computers on your local network.
#/sbin/modprobe appletalk

### IPX networking support ###
#/sbin/modprobe ipx

### IDE device support ###
# IDE CD-ROM drives:
#/sbin/modprobe ide-cd
# IDE hard drives:
#/sbin/modprobe ide-disk
# IDE floppy drives:
#/sbin/modprobe ide-floppy
# IDE tape drives:
#/sbin/modprobe ide-tape

### Network device support ###
# Most of these drivers will probe automatically for the card if you don't
# specify an I/O address and IRQ.  
#
# First, if setup probing found a network card, there may be an 'rc.netdevice'
# file that we should run to load the network module:
if [ -x /etc/rc.d/rc.netdevice ]; then
  . /etc/rc.d/rc.netdevice
fi

### Ethernet cards based on the 8390 chip.
# 3com 3c503 support:
#/sbin/modprobe 3c503 
# Ansel Communications EISA 3200 support:
#/sbin/modprobe ac3200
# Cabletron E21xx support:
#/sbin/modprobe e2100
# HP PCLAN+ (27247B and 27252A) support:
#/sbin/modprobe hp-plus
# HP PCLAN (27245 and other 27xxx series) support:
#/sbin/modprobe hp
# NE2000/NE1000 support (non PCI):
#/sbin/modprobe ne io=0x300 # NE2000 at 0x300
#/sbin/modprobe ne io=0x280 # NE2000 at 0x280
#/sbin/modprobe ne io=0x320 # NE2000 at 0x320
#/sbin/modprobe ne io=0x340 # NE2000 at 0x340
#/sbin/modprobe ne io=0x360 # NE2000 at 0x360
# PCI NE2000 clone support:
#/sbin/modprobe ne2k-pci
# SMC Ultra support:
#/sbin/modprobe smc-ultra
# SMC Ultra32 EISA support:
#/sbin/modprobe smc-ultra32
# Western Digital WD80*3 (and clones) support:
#/sbin/modprobe wd
#
# Other network hardware drivers:
# 
# 3com 3c501 (consider buying a new card, since the 3c501 is slow,
# broken, and obsolete):
#/sbin/modprobe 3c501
# 3com 3c503:
#/sbin/modprobe 3c503
# 3com 3c505:
#/sbin/modprobe 3c505
# 3com 3c507:
#/sbin/modprobe 3c507
# 3com 3c509 and 3c579:
#/sbin/modprobe 3c509
# 3com 3c515:
#/sbin/modprobe 3c515
# This one works for all 3com 3c590/3c592/3c595/3c597 and the
# EtherLink XL 3c900 and 3c905 cards:
#/sbin/modprobe 3c59x
# Apricot Xen-II on board Ethernet:
#/sbin/modprobe apricot
# Generic ARCnet support:
#/sbin/modprobe arcnet
# AT1700/1720 & Fujitsu FMV-181/182/183/184 support:
#/sbin/modprobe at1700
# AT-LAN-TEC/RealTek pocket adapter support:
#/sbin/modprobe atp
# BPQ Ethernet driver:
#/sbin/modprobe bpqether
# Generic DECchip & DIGITAL EtherWORKS PCI/EISA:
#/sbin/modprobe de4x5
# D-Link DE600 pocket adapter support:
#/sbin/modprobe de600
# D-Link DE620 pocket adapter support:
#/sbin/modprobe de620
# DEPCA support:
#/sbin/modprobe depca
# Digi International RightSwitch cards:
#/sbin/modprobe dgrs
# Intel EtherExpress Pro support:
#/sbin/modprobe eepro
# Intel EtherExpress PRO/100 PCI support:
#/sbin/modprobe eepro100
# Intel EtherExpress16 support:
#/sbin/modprobe eexpress
# SMC EtherPower II 9432 PCI support:
#/sbin/modprobe epic100
# ICL EtherTeam 16i/32 support:
#/sbin/modprobe eth16i
# DEC EtherWorks 3 support:
#/sbin/modprobe ewrk3
# HP 10/100VG PCLAN (ISA, EISA, PCI) support:
#/sbin/modprobe hp100
# IBM Tropic chipset based adapter support:
#/sbin/modprobe ibmtr
# AMD LANCE and PCnet (AT1500 and NE2100) support:
#/sbin/modprobe lance
# National Semiconductor DP8381x series PCI Ethernet support:
#/sbin/modprobe natsemi
# NI5210 support:
#/sbin/modprobe ni52
# NI6510 support:
#/sbin/modprobe ni65
# AMD PCnet32 (VLB and PCI) support:
#/sbin/modprobe pcnet32
# Red Creek Hardware Virtual Private Network (VPN) support:
#/sbin/modprobe rcpci
# RealTek 8129/8139 (not 8019/8029!) support:
#/sbin/modprobe 8139too
# RealTek 8139C+ enhanced support:
#/sbin/modprobe 8139cp
# Sangoma S502A FRAD support:
#/sbin/modprobe sdla
# SMC 9194 support:
#/sbin/modprobe smc9194
# TI ThunderLAN support:
#/sbin/modprobe tlan
# DECchip Tulip (dc21x4x) PCI support:
#/sbin/modprobe tulip
# VIA Rhine support:
#/sbin/modprobe via-rhine
# AT&T WaveLAN & DEC RoamAbout DS support:
#/sbin/modprobe wavelan
# Packet Engines Yellowfin Gigabit-NIC support:
#/sbin/modprobe yellowfin
# Davicom DM9xxx (9102/9132/9100/9802...)
#/sbin/modprobe dmfe
# SiS 900/7016 PCI Fast Ethernet
#/sbin/modprobe sis900

### Serial line load balancing support ###
#/sbin/modprobe eql

### "dummy" IP support ###
# A dummy IP driver.  Essentially a loopback device.  Can be useful --
# see the Network Administrator's Guide from sunsite.unc.edu:/pub/Linux/docs/LDP
#/sbin/modprobe dummy

### ISDN kernel support ###
#/sbin/modprobe isdn
# ISDN loop (provides a virtual ISDN card for testing):
#/sbin/modprobe isdnloop

### ISDN interface support ###
# AVM-B1 with CAPI2.0 driver (requires additional firmware; see
# /usr/src/linux/Documentation/isdn/README.avmb1):
#/sbin/modprobe capidrv
# HiSax SiemensChipSet driver (supports AVM A1, Elsa ISDN cards, 
# Teles S0-16.0, Teles S0-16.3, Teles S0-8, Teles/Creatix PnP,
# ITK micro ix1 and many compatibles):
#/sbin/modprobe hisax
# IBM Active 2000 ISDN card support (requires additional firmware; see
# /usr/src/linux/Documentation/isdn/README.act2000 for more information)
#/sbin/modprobe act2000
# ICN active ISDN card driver:
#/sbin/modprobe icn
# PCBIT-D driver (requires additional firmware; see
# /usr/src/linux/Documentation/isdn/README.pcbit for more information)
#/sbin/modprobe pcbit
# Spellcaster BRI ISDN driver:
#/sbin/modprobe sc

### Binary format support ###
#/sbin/modprobe binfmt_aout
#/sbin/modprobe binfmt_elf
#/sbin/modprobe binfmt_java
#/sbin/modprobe binfmt_misc

### Filesystem support ###
#/sbin/modprobe adfs
#/sbin/modprobe affs
#/sbin/modprobe autofs4
#/sbin/modprobe coda
#/sbin/modprobe cramfs
#/sbin/modprobe exportfs
#/sbin/modprobe ext2
#/sbin/modprobe ext3
#/sbin/modprobe fat
#/sbin/modprobe fuse
#/sbin/modprobe hfs
#/sbin/modprobe hfsplus
#/sbin/modprobe hpfs
#/sbin/modprobe intermezzo
#/sbin/modprobe isofs
#/sbin/modprobe jfs
#/sbin/modprobe minix
#/sbin/modprobe msdos
#/sbin/modprobe ncpfs
#/sbin/modprobe nfs
#/sbin/modprobe ntfs
#/sbin/modprobe ocfs2
#/sbin/modprobe qnx4
#/sbin/modprobe reiserfs
#/sbin/modprobe relayfs
#/sbin/modprobe romfs
#/sbin/modprobe smbfs
#/sbin/modprobe sysfs
#/sbin/modprobe sysv
#/sbin/modprobe tmpfs
#/sbin/modprobe udf
#/sbin/modprobe ufs
#/sbin/modprobe umsdos
#/sbin/modprobe usbfs
#/sbin/modprobe vfat
#/sbin/modprobe xfs

### RAID (Multiple Devices) support ###
#/sbin/modprobe linear
#/sbin/modprobe raid0
#/sbin/modprobe raid1
#/sbin/modprobe raid5

# Note: this *IS NOT* needed to burn discs with 2.6.x or newer kernels.
#
# SCSI emulation support.  This will provide SCSI host adapter emulation
# for IDE ATAPI devices, and will allow you to use a SCSI device driver
# instead of a native ATAPI driver.  This is useful if you have an ATAPI
# device for which no native driver has been written (for example, an ATAPI
# PD-CD, CD-RW, or DVD-RW drive);  you can then use this emulation together
# with an # appropriate SCSI device driver.  Note that this option does not
# allow you to attach SCSI devices to a box that doesn't have a SCSI host
# adapter installed.  :-)  Also, you'll need to tell the ide-scsi module
# which device is your burner so that the normal ATAPI driver won't grab it
# first.  This is done by passing a flag to the kernel at boot time.
# If you're using LILO, add this:  append="hdc=ide-scsi"
# Replace "hdc" with the appropriate device name.
#
#/sbin/modprobe ide-scsi

### SCSI kernel support:
#/sbin/modprobe scsi_mod
#/sbin/modprobe scsi_syms
#/sbin/modprobe sd_mod
#/sbin/modprobe sg
#/sbin/modprobe sr_mod
#/sbin/modprobe st

### SCSI controller support:
# NCR53c7xx SCSI support: 
#/sbin/modprobe 53c7xx
# BusLogic MultiMaster and FlashPoint SCSI support:
#/sbin/modprobe BusLogic
# NCR53c406a SCSI support:
#/sbin/modprobe NCR53c406a
# Initio INI-A100U2W SCSI support:
#/sbin/modprobe a100u2w
# AdvanSys SCSI support:
#/sbin/modprobe advansys 
# Adaptec AHA152X/2825 support:
#/sbin/modprobe aha152x
# Adaptec AHA1542 support:
#/sbin/modprobe aha1542
# Adaptec AHA1740 support:
#/sbin/modprobe aha1740
# This is support for the various aic7xxx based Adaptec SCSI
# controllers. These include the 274x EISA cards; 284x VLB cards;
# 2902, 2910, 293x, 294x, 394x, 3985 and several other PCI and
# motherboard based SCSI controllers from Adaptec:
#/sbin/modprobe aic7xxx
# ACARD 870U/W SCSI support:
#/sbin/modprobe atp870u
# DTC 3180/3280 SCSI support:
#/sbin/modprobe dtc
# EATA ISA/EISA/PCI (DPT and generic EATA/DMA-compliant boards) support:
#/sbin/modprobe eata
# EATA-PIO (old DPT PM2001, PM2012A) support:
#/sbin/modprobe eata_pio
# Future Domain 16xx SCSI/AHA-2920A support:
#/sbin/modprobe fdomain
# Generic NCR5380/53c400 SCSI support:
#/sbin/modprobe g_NCR5380
# GDT SCSI Disk Array Controller support:
#/sbin/modprobe gdth
# IOMEGA parallel port (imm - newer drives like ZipPlus):
#/sbin/modprobe imm
# Always IN2000 SCSI support:
#/sbin/modprobe in2000
# Initio 91XXU(W) SCSI support:
#/sbin/modprobe initio
# LSI Logic MegaRAID support (new driver):
#/sbin/modprobe megaraid_mbox
# LSI Logic MegaRAID support (legacy driver):
#/sbin/modprobe megaraid
# NCR53C8XX SCSI support:
#/sbin/modprobe sym53c8xx
# PAS16 SCSI support:
#/sbin/modprobe pas16
# IOMEGA parallel port (ppa - older parallel Zip drives):
#/sbin/modprobe ppa
# PSI240i support:
#/sbin/modprobe psi240i
# Qlogic FastSCSI! cards:
#/sbin/modprobe qlogicfas
# QLogic ISP2100 SCSI support:
#/sbin/modprobe qlogicfc
# Seagate ST-02 and Future Domain TMC-8xx SCSI support:
#/sbin/modprobe seagate
# Symbios Logic sym53c416 support:
#/sbin/modprobe sym53c416
# Trantor T128/T128F/T228 SCSI support:
#/sbin/modprobe t128
# Tekram DC390(T) and Am53/79C974 (PCscsi) SCSI support:
#/sbin/modprobe tmscsim
# UltraStor 14F and 34F support (also see driver below):
#/sbin/modprobe u14-34f
# UltraStor 14F, 24F, and 34F support:
#/sbin/modprobe ultrastor
# Western Digital 7000 SCSI support:
#/sbin/modprobe wd7000

### Floppy drive support:
# (Most Linux kernels should already contain this)
#/sbin/modprobe floppy

### Floppy tape support (such as Colorado Jumbo 250 or other QIC-80 drives):
#/sbin/modprobe ftape

### IP masquerading modules:
# These modules are used with IP masquerading, a process which allows you to
# use a Linux box connected to the Internet (via PPP or SLIP, or some other
# means) as a gateway for other Linux, Windows, Macintosh boxes on your local
# network that don't have real IP addresses on the Internet.  The packets
# going through the Linux machine are "masqueraded", or made to look as if
# they're all coming from the one real IP address on the Internet.
#
# As a quick example (for a much more extensive treatment, see the IP-Masquerade
# mini-HOWTO) to allow Internet access to a local network 192.168.11.0 with a
# netmask of 255.255.255.0, you'd use these commands in /etc/rc.d/rc.local:
#
#  # EXTERNAL -> external network interface 
#  # INTERNAL -> internal network interface
#  EXTERNAL=eth0
#  INTERNAL=eth1
#  echo 1 > /proc/sys/net/ipv4/ip_forward
#  echo "Setting up NAT (Network Address Translation)..."
#  # by default, nothing is forwarded.
#  iptables -P FORWARD DROP
#  # Allow all connections OUT and only related ones IN
#  iptables -A FORWARD -i $EXTERNAL -o $INTERNAL -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
#  iptables -A FORWARD -i $INTERNAL -o $EXTERNAL -j ACCEPT
#  # enable MASQUERADING
#  iptables -t nat -A POSTROUTING -o $EXTERNAL -j MASQUERADE
#
# Then you'd have to set the other boxes on your local network to use the
# Linux machine as their TCP/IP gateway.  You'll probably also need to plug
# in the IP address for your Internet service provider in each machine's DNS
# setup.
#
# Now, on to the IP masquerading modules.  The example above is good enough
# for most things that use TCP in a relatively simple fashion.  It'll work
# for telnet and http, for instance.  But, the system breaks down when you
# get protocols that use ports in more complicated ways.  Luckily the Linux
# kernel gurus have thought of this and have prepared some modules that
# support masquerading of trickier protocols.  The ipchains command is mighty
# flexible as well, and a lot of things can be made to work just by setting
# that up correctly.
#
# Special modules for iptables. See also "man iptables" for information about
# that powerful firewall tool.
#
#/sbin/modprobe ipt_conntrack
#/sbin/modprobe ip_conntrack
#/sbin/modprobe ip_conntrack_ftp
#/sbin/modprobe ip_conntrack_irc
#/sbin/modprobe ip_nat_ftp
#/sbin/modprobe ip_nat_irc
#/sbin/modprobe ip_nat_snmp_basic

### CPU frequency scaling support
#
# Below, set CPUFREQ to enable CPU frequency scaling to save system power.
#
# To always try to use CPU frequency scaling, set to:  on
# To never use CPU frequency scaling, set to:  off
# To use it only when the battery module is loaded (this will cause it to
# be used by default with most laptops), set to:  battery
#
CPUFREQ=battery

# If CPUFREQ=battery and the battery module is loaded, turn on CPUfreq.
if [ "$CPUFREQ" = "battery" ]; then
  if /sbin/lsmod | grep -wq battery ; then
    # CPUFREQ=battery and a battery was detected, so change CPUFREQ
    # to 'on' so that the block of script below will try to enable it.
    CPUFREQ=on
  fi
fi

### Enable CPU frequency scaling if requested:
if [ "$CPUFREQ" = "on" ]; then
  ### CPU frequency scaling modules for the Linux kernel CPUfreq subsystem.
  #
  # Clock scaling allows you to change the clock speed of the CPUs on the fly.
  # This is a nice method to save battery power, because the lower the clock
  # speed is, the less power the CPU consumes.
  # 
  # It should not hurt anything to try to load these modules.
  #
  # generic ACPI P-States based driver:
  /sbin/modprobe acpi-cpufreq 2>/dev/null
  # AMD mobile K6-2/3+ PowerNow!:
  /sbin/modprobe powernow-k6 2>/dev/null
  # AMD mobile Athlon PowerNow!:
  /sbin/modprobe powernow-k7 2>/dev/null
  # AMD Cool&Quiet PowerNow!:
  /sbin/modprobe powernow-k8 2>/dev/null
  # Intel SpeedStep using the SMI BIOS interface:
  /sbin/modprobe speedstep-smi 2>/dev/null
  # Intel SpeedStep on ICH-based chipsets:
  /sbin/modprobe speedstep-ich 2>/dev/null
  # Intel Enhanced SpeedStep :
  /sbin/modprobe speedstep-centrino 2>/dev/null
  # Intel Pentium4/Xeon clock modulation is not enabled by default.
  # The kernel documentation says "This adds the CPUFreq driver for Intel
  # Pentium 4 / XEON processors.  When enabled it will lower CPU temperature
  # by skipping clocks.  This driver should be only used in exceptional
  # circumstances when very low power is needed because it causes severe
  # slowdowns and noticeable latencies.  Normally Speedstep should be used
  # instead."
  # If you still want to try the Pentium4/Xeon module, uncomment the next line:
  #/sbin/modprobe p4-clockmod 2>/dev/null
  # NatSemi Geode GX / Cyrix MediaGXm:
  /sbin/modprobe gx-suspmod  2>/dev/null
  # Transmeta Crusoe / Efficeon LongRun:
  /sbin/modprobe longrun  2>/dev/null
  # VIA Cyrix Longhaul:
  /sbin/modprobe longhaul  2>/dev/null
  # nForce2 FSB changing cpufreq driver:
  /sbin/modprobe cpufreq-nforce2 2>/dev/null
  # Enhanced PowerSaver driver for VIA C7 CPUs:
  /sbin/modprobe e_powersaver 2>/dev/null

  ### CPU frequency scaling policies:
  #
  # Use the CPUFreq governor 'powersave' as default.  This sets the
  # frequency statically to the lowest frequency supported by the CPU.
  #/sbin/modprobe cpufreq_powersave
  #
  # Use the CPUFreq governor 'performance' as default. This sets the
  # frequency statically to the highest frequency supported by the CPU.
  #/sbin/modprobe cpufreq_performance
  #
  # Use the CPUFreq governor 'conservative' as default.  This allows you
  # to get a full dynamic frequency capable system by simply loading your
  # cpufreq low-level hardware driver.  Be aware that not all cpufreq
  # drivers support the 'conservative' governor -- the fallback governor
  # will be the 'performance' governor.
  #/sbin/modprobe cpufreq_conservative
  #
  # Use the CPUFreq governor 'ondemand' as default.  This allows you to
  # get a full dynamic frequency capable system by simply loading your
  # cpufreq low-level hardware driver.  Be aware that not all cpufreq
  # drivers support the 'ondemand' governor -- the fallback governor will
  # be the performance governor.  This seems to be the most-recommended
  # scaling policy, so rc.modules will try to load this by default.
  /sbin/modprobe cpufreq_ondemand 2>/dev/null

  ### CPU scaling governor:
  #
  # Set the default scaling_governor to be used (such as userspace or ondemand)
  # if there is a CPUFreq scaling policy module loaded that supports it:
  SCALING_GOVERNOR=ondemand
  #
  # Try to enable the scaling_governor selected above:
  if [ -r /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors ]; then
    if grep -wq "$SCALING_GOVERNOR" /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors ; then
      if [ -r /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor ]; then
        for SYSCPUFILE in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor ; do
          echo "$SCALING_GOVERNOR" > $SYSCPUFILE
        done
      fi
    fi
  fi

fi # End enabling CPU scaling support

# We are done with these variables now:
unset NEWMODS RELEASE CPUFREQ SCALING_GOVERNOR SYSCPUFILE

